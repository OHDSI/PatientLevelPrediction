# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}  # Does not appear to have Java 32-bit, hence the --no-multiarch
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04, r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      CDM5_ORACLE_CDM_SCHEMA: ${{ secrets.CDM5_ORACLE_CDM_SCHEMA }}
      CDM5_ORACLE_OHDSI_SCHEMA: ${{ secrets.CDM5_ORACLE_OHDSI_SCHEMA }}
      CDM5_ORACLE_PASSWORD: ${{ secrets.CDM5_ORACLE_PASSWORD }}
      CDM5_ORACLE_SERVER: ${{ secrets.CDM5_ORACLE_SERVER }}
      CDM5_ORACLE_USER: ${{ secrets.CDM5_ORACLE_USER }}
      CDM5_POSTGRESQL_CDM_SCHEMA: ${{ secrets.CDM5_POSTGRESQL_CDM_SCHEMA }}
      CDM5_POSTGRESQL_OHDSI_SCHEMA: ${{ secrets.CDM5_POSTGRESQL_OHDSI_SCHEMA }}
      CDM5_POSTGRESQL_PASSWORD: ${{ secrets.CDM5_POSTGRESQL_PASSWORD }}
      CDM5_POSTGRESQL_SERVER: ${{ secrets.CDM5_POSTGRESQL_SERVER }}
      CDM5_POSTGRESQL_USER: ${{ secrets.CDM5_POSTGRESQL_USER }}
      CDM5_SQL_SERVER_CDM_SCHEMA: ${{ secrets.CDM5_SQL_SERVER_CDM_SCHEMA }}
      CDM5_SQL_SERVER_OHDSI_SCHEMA: ${{ secrets.CDM5_SQL_SERVER_OHDSI_SCHEMA }}
      CDM5_SQL_SERVER_PASSWORD: ${{ secrets.CDM5_SQL_SERVER_PASSWORD }}
      CDM5_SQL_SERVER_SERVER: ${{ secrets.CDM5_SQL_SERVER_SERVER }}
      CDM5_SQL_SERVER_USER: ${{ secrets.CDM5_SQL_SERVER_USER }}

    steps:
      - uses: actions/checkout@v2
    
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.7"
          activate-environment: r-reticulate
      
      - name: python main dependencies  
        run: conda install --name r-reticulate numpy scipy scikit-learn pandas pydotplus joblib 
       
      - name: python keras and tensorflow dependencies   
        run: conda install --name r-reticulate -c conda-forge keras tensorflow
      
      - name: python scikit-survival dependencies    
        run: conda install --name r-reticulate -c sebp scikit-survival
       
      - name: python torch 
        run: conda install --name r-reticulate -c conda-forge pytorch-cpu

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-tinytex@v1

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-3-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-3-
  
      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE, INSTALL_opts=c("--no-multiarch"))
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Install covr
        if: runner.os == 'Windows'
        run: |
          remotes::install_cran("covr")
        shell: Rscript {0}

      - name: Remove check folder if exists
        if: runner.os == 'macOS'
        run: unlink("check", recursive = TRUE)
        shell: Rscript {0}

      - name: use r-reticulate environment
        run: |
          reticulate::use_condaenv("r-reticulate", required = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran", "--no-multiarch"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Upload source package
        if: success() && runner.os == 'macOS' && github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2
        with:
          name: package_tarball
          path: check/*.tar.gz

      - name: Test coverage
        if: runner.os == 'Windows'
        run: covr::codecov()
        shell: Rscript {0}


  Release:
    needs: R-CMD-Check
    
    runs-on: macOS-latest

    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master' }}

    steps:
      
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0    

      - name: Check if version has increased
        run: |
          echo "new_version="$(perl compare_versions --tag) >> $GITHUB_ENV
          
      - name: Display new version number
        if: ${{ env.new_version != '' }}
        run: |
          echo "${{ env.new_version }}" 
          
      - name: Create release
        if: ${{ env.new_version != '' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} 
        with:
          tag_name: ${{ env.new_version }}
          release_name: Release ${{ env.new_version }}
          body: |
            See NEWS.md for release notes.
          draft: false
          prerelease: false
          
      - uses: r-lib/actions/setup-r@v1
        if: ${{ env.new_version != '' }}
        
      - name: Install drat
        if: ${{ env.new_version != '' }}
        run: |
          install.packages('drat')
        shell: Rscript {0}
        
      - name: Remove any tarballs that already exists
        if: ${{ env.new_version != '' }}
        run: |
          rm -f *.tar.gz
          
      - name: Download package tarball
        if: ${{ env.new_version != '' }}
        uses: actions/download-artifact@v2
        with:
          name: package_tarball    
          
      - name: Push to drat
        if: ${{ env.new_version != '' }}
        run: |
          bash deploy.sh

      - name: Push to BroadSea
        if: ${{ env.new_version != '' }}
        run: |
          curl --data "build=true" -X POST https://registry.hub.docker.com/u/ohdsi/broadsea-methodslibrary/trigger/f0b51cec-4027-4781-9383-4b38b42dd4f5/
          
